{"ast":null,"code":"var _jsxFileName = \"/home/orange/fullstack_app/client/src/App.js\";\n// client/src/App.js\nimport React, { Component } from \"react\";\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDb = () => {\n      fetch('http://localhost:3001/api/getData').then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.putDataToDB = message => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post('http://localhost:3001/api/putData', {\n        id: idToBeAdded,\n        message: message\n      });\n    };\n\n    this.deleteFromDB = idTodelete => {\n      parseInt(idTodelete);\n      alert(idTodelete);\n      let objIdToDelete = null;\n      this.state.data.forEach(dat => {\n        if (dat.id === idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n      axios.delete('http://localhost:3001/api/deleteData', {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    this.updateDB = (idToUpdate, updateToApply) => {\n      let objIdToUpdate = null;\n      parseInt(idToUpdate);\n      this.state.data.forEach(dat => {\n        if (dat.id === idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n      axios.post('http://localhost:3001/api/updateData', {\n        id: objIdToUpdate,\n        update: {\n          message: updateToApply\n        }\n      });\n    };\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  }\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const data = this.state.data;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(dat => React.createElement(\"li\", {\n      style: {\n        padding: '10px'\n      },\n      key: data.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \" id: \"), \" \", dat.id, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \" data: \"), dat.message))), React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.setState({\n        message: e.target.value\n      }),\n      placeholder: \"add something in the database\",\n      style: {\n        width: '200px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.putDataToDB(this.state.message),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"ADD\")), React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        idToDelete: e.target.value\n      }),\n      placeholder: \"put id of item to delete here\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.deleteFromDB(this.state.idToDelete),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"DELETE\")), React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        idToUpdate: e.target.value\n      }),\n      placeholder: \"id of item to update here\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        updateToApply: e.target.value\n      }),\n      placeholder: \"put new value of the item here\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.updateDB(this.state.idToUpdate, this.state.updateToApply),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"UPDATE\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/orange/fullstack_app/client/src/App.js"],"names":["React","Component","axios","App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","parseInt","alert","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","length","padding","color","e","target","value","width"],"mappings":"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","sourcesContent":["// client/src/App.js\nimport React, { Component } from \"react\";\nimport axios from 'axios';\n\n\nclass App extends Component\n{\n\tstate = {\n\t\tdata:[],\n\t\tid:0,\n\t\tmessage:null,\n\t\tintervalIsSet: false,\n\t\tidToDelete: null,\n\t\tidToUpdate: null,\n\t\tobjectToUpdate: null,\n\t};\n\n\t// when component mounts, first thing it does is fetch all existing data in our db\n\t// then we incorporate a polling logic so that we can easily see if our db has\n\t// changed and implement those changes into our UI\n\tcomponentDidMount() {\n\t  this.getDataFromDb();\n\t  if (!this.state.intervalIsSet) {\n\t    let interval = setInterval(this.getDataFromDb, 1000);\n\t    this.setState({ intervalIsSet: interval });\n\t  }\n\t}\n\n\n\t// just a note, here, in the front end, we use the id key of our data object\n\t// in order to identify which we want to Update or delete.\n\t// for our back end, we use the object id assigned by MongoDB to modify\n\t// data base entries\n\n\t// our first get method that uses our backend api to\n\t// fetch data from our data base\n\n\tcomponentWillUnmount() {\n\t  if (this.state.intervalIsSet) {\n\t    clearInterval(this.state.intervalIsSet);\n\t    this.setState({ intervalIsSet: null });\n\t  }\n\t}\n\n\tgetDataFromDb = () => {\n\t  fetch('http://localhost:3001/api/getData')\n\t    .then((data) => data.json())\n\t    .then((res) => this.setState({ data: res.data }));\n\t};\n\n\t// our put method that uses our backend api\n\t// to create new query into our data base\n\tputDataToDB = (message) => {\n\t  let currentIds = this.state.data.map((data) => data.id);\n\t  let idToBeAdded = 0;\n\t  while (currentIds.includes(idToBeAdded)) {\n\t    ++idToBeAdded;\n\t  }\n\n\t  axios.post('http://localhost:3001/api/putData', {\n\t    id: idToBeAdded,\n\t    message: message,\n\t  });\n\t};\n\n\t// our delete method that uses our backend api\n\t// to remove existing database information\n\tdeleteFromDB = (idTodelete) => {\n\t  parseInt(idTodelete);\n\t  alert(idTodelete);\n\t  let objIdToDelete = null;\n\t  this.state.data.forEach((dat) => {\n\t    if (dat.id === idTodelete) {\n\t      objIdToDelete = dat._id;\n\t    }\n\t  });\n\n\t  axios.delete('http://localhost:3001/api/deleteData', {\n\t    data: {\n\t      id: objIdToDelete,\n\t    },\n\t  });\n\t};\n\n\t// our update method that uses our backend api\n\t// to overwrite existing data base information\n\tupdateDB = (idToUpdate, updateToApply) => {\n\t  let objIdToUpdate = null;\n\t  parseInt(idToUpdate);\n\t  this.state.data.forEach((dat) => {\n\t    if (dat.id === idToUpdate) {\n\t      objIdToUpdate = dat._id;\n\t    }\n\t  });\n\n\t  axios.post('http://localhost:3001/api/updateData', {\n\t    id: objIdToUpdate,\n\t    update: { message: updateToApply },\n\t  });\n\t};\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        <ul>\n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map((dat) => (\n                <li style={{ padding: '10px' }} key={data.message}>\n                  <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                  <span style={{ color: 'gray' }}> data: </span>\n                  {dat.message}\n                </li>\n              ))}\n        </ul>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            onChange={(e) => this.setState({ message: e.target.value })}\n            placeholder=\"add something in the database\"\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}